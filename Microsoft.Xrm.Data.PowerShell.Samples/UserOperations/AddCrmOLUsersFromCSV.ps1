# Generated by: Sean McNellis (seanmcn)
#
# Copyright © Microsoft Corporation.  All Rights Reserved.
# This code released under the terms of the 
# Microsoft Public License (MS-PL, http://opensource.org/licenses/ms-pl.html.)
# Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment. 
# THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, 
# INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. 
# We grant You a nonexclusive, royalty-free right to use and modify the Sample Code and to reproduce and distribute the object code form of the Sample Code, provided that. 
# You agree: 
# (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded; 
# (ii) to include a valid copyright notice on Your software product in which the Sample Code is embedded; 
# and (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits, including attorneys’ fees, that arise or result from the use or distribution of the Sample Code 

Function New-MsolGroupForCRM
{
    param
    (   
        [String]$MsolGroupName
    )
        
    # This retrievs all groups. If you already know Group Guid, you can use it instead.
    $msolGroup = Get-MsolGroup | ? {$_.DisplayName -eq $msolGroupName}
    
    if($msolGroup -ne $null)
    {
        return $msolGroup.ObjectId
    }
    else
    {
        $msolGroup = New-MsolGroup -DisplayName $msolGroupName
        return $msolGroup.ObjectId
    }
}

Function New-MsolUserFromCsv
{
    param
    (   
        [PSObject]$User,
        [String]$MsolDomainName,
        [Guid]$MsolGroupId
    )

    # You can use Get-MsolAccountSku function to get all available license of the Office 365 instance
    $crmLicenseName = $MsolDomainName + ":CRMSTANDARD"
    $userPrincipalName = $User.UserPrincipalName

    Write-Output "Retrieve MsolUser $userPrincipalName" 
    $msolUser = Get-MsolUser -UserPrincipalName $userPrincipalName -ErrorAction SilentlyContinue
    
    if($msolUser -ne $null)
    {
        Write-Output "MsolUser $userPrincipalName Found. Checking CRM License"

        $crmLicense = $msolUser.Licenses | ? {$_.AccountSkuId -eq $crmLicenseName}
        if($crmLicense -eq $null)
        {
            Write-Output "CrmLicense not assigned. Assigning license."
            Set-MsolUserLicense -UserPrincipalName $userPrincipalName -AddLicenses $crmLicenseName
        }
        else
        {
            Write-Output "User $userPrincipalName already exists and has CRM license"
        }
    }
    else
    {
        Write-Output "Creating User $UserDisplayName and assign CRM license" 

        # Convert string to bool
        $strongPasswordRequired = if($User.StrongPasswordRequired -eq 'true') { $true } else { $false }
        $passwordNeverExpires = if($User.PasswordNeverExpires -eq 'true') { $true } else { $false }
        $forceChangePassword = if($User.ForceChangePassword -eq 'true') { $true } else { $false }
        
        $msolUser = New-MsolUser -UserPrincipalName $User.UserPrincipalName -DisplayName $User.DisplayName `
        -FirstName $User.FirstName -LastName $User.LastName -PhoneNumber $User.PhoneNumber `
        -MobilePhone $User.MobilePhone -PostalCode $User.PostalCode -City $User.City `
        -Country $User.Country -State $User.State -StreetAddress $User.StreetAddress `
        -Title $User.Title -Department $User.Department -Office $User.Office -Fax $User.Fax `
        -UsageLocation $User.UsageLocation -Password $User.Password `
        -StrongPasswordRequired $strongPasswordRequired `
        -PasswordNeverExpires $passwordNeverExpires `
        -ForceChangePassword $forceChangePassword `
        -LicenseAssignment $crmLicenseName
    }
    
    if($MsolGroupId -ne $null)
    {
        Add-MsolGroupMember -GroupObjectId $MsolGroupId -GroupMemberObjectId $msolUser.ObjectId -GroupMemberType User
    }
}

Function Confirm-CrmUserCreation
{
    param
    (   
        [PSObject]$User
    )

    $domainName = $User.UserPrincipalName

    # Dynamics CRM Online user will be synchronized if Office 365 user has a valid license.
    # As it may take minutes, do retrieve every 5 seconds in while loop.
    while($true)
    {
        $crmUser = Get-CrmRecords -EntityLogicalName systemuser -FilterAttribute domainname -FilterOperator eq -FilterValue $domainName -Fields domainname,isdisabled
        if($crmUser.CrmRecords.Count -eq 0)
        {
            Start-Sleep -Seconds 5
        }
        else
        {
            if($crmUser.CrmRecords[0].isdisabled_Property.Value -eq $False)
            {
                Write-Output "$domainName is added to CRM system"
                $User.SystemUserId = $crmUser.CrmRecords[0].systemuserid.Guid
            }
            else
            {
                Write-Output "$domainName is added to CRM system but disabled state"
            }
            break
        }
    }   
}

Function Move-CrmUserBusinessUnit
{
    param
    (   
        [PSObject]$User
    )

    $domainName = $User.UserPrincipalName
    $systemUserId = $User.SystemUserId
    $businessUnitName = $User.BusinessUnitName

    $businessUnit = Get-CrmRecords -EntityLogicalName businessunit -FilterAttribute name -FilterOperator eq -FilterValue $businessUnitName -Fields businessunitid
    
    if($businessUnit.CrmRecords.Count -eq 0)
    {
        Write-Error "Business Unit $businessUnitName does not exist"
        return
    }
    else
    {
        Write-Output "Move $domainName to $businessUnitName"
        $businessUnitId = $businessUnit.CrmRecords[0].businessunitid.Guid
        Set-CrmUserBusinessUnit -BusinessUnitId $businessUnitId -UserId $systemUserId -ReassignUserId $systemUserId
        $User.BusinessUnitId = $businessUnitId
    }    
}

Function Assign-CrmUserSecurityRole
{
    param
    (   
        [PSObject]$User
    )

    $domainName = $User.UserPrincipalName
    $securityRoleName = $User.SecurityRoleName
    $systemUserId = $User.SystemUserId
    $businessUnitId = $User.BusinessUnitId

    $fetch = @"
<fetch version="1.0" output-format="xml-platform" mapping="logical" distinct="false" no-lock="true">
  <entity name="role">
    <attribute name="roleid" />
    <filter type="and">
      <condition attribute="name" operator="eq" value="{0}" />
      <condition attribute="businessunitid" operator="eq" value="{1}" />
    </filter>
  </entity>
</fetch>
"@

    $fetch = $fetch -F $securityRoleName, $businessUnitId

    $securityRole = Get-CrmRecordsByFetch -Fetch $fetch

    if($securityRole.CrmRecords.Count -eq 0)
    {
        Write-Error "SecurityRole $securityRoleName does not exist"
        return
    }
    else
    {
        Write-Output "Assign $securityRoleName to $domainName"
        $securityRoleId = $securityRole.CrmRecords[0].roleid.Guid
        Add-CrmSecurityRoleToUser -UserId $systemUserId -SecurityRoleId $securityRoleId
    }    
}

# Script parameters #
$msolUser = "<Office 365 admin account. i.e.) administator@contoso.onmicrosoft.com>"
$msolPassword = ConvertTo-SecureString -String "<password>" -AsPlainText -Force
$msolDomainName = "<Office 365 tenant name. i.e.) contoso>"
$msolGroupName = "<Office 365 Group name>"
$csvPath = ".\AddCrmOLUsersFromCSV.csv"

$crmAdminUser = "<CRM admin account. i.e.) administator@contoso.onmicrosoft.com>"
$crmAdminPassword = ConvertTo-SecureString -String "<password>" -AsPlainText -Force
# Script parameters #

Write-Output "Connecting to Office 365 as $msolUser"

Import-Module MSOnline
$msolCred = New-Object System.Management.Automation.PSCredential ($msolUser,$msolPassword) 
Try
{
    Connect-MsolService -Credential $msolCred -ErrorAction Stop
}
Catch
{
     throw
}

Write-Output "Connecting to CRM Online as $crmAdminUser"
$crmCred = New-Object System.Management.Automation.PSCredential ($crmAdminUser,$crmAdminPassword) 
Try
{
    # You can also use Get-CrmConnection to directly create connection.
    # See https://msdn.microsoft.com/en-us/library/dn756303.aspx for more detail.
    Connect-CrmOnlineDiscovery -Credential $crmCred -ErrorAction Stop
}
Catch
{
     throw
}

# You can omit this function if you do not want to add users to a group.
Write-Output "Creating Azure AD Group"
$msolGroupId = New-MsolGroupForCRM -MsolGroupName $msolGroupName

Write-Output "Loading User CSV File"
$users = Import-Csv -Path $csvPath

# Do not pass $msolGroupId in case you don't want to add users to a group.
Write-Output "Creating Azure AD User"
$users | % {New-MsolUserFromCsv -User $_ -MsolDomainName $msolDomainName -MsolGroupId $msolGroupId}

Write-Output "Confirm Crm User on Dynamics CRM Online"
$users | % {Confirm-CrmUserCreation -User $_}

Write-Output "Move Crm User to BusinessUnit"
$users | % {Move-CrmUserBusinessUnit -User $_}

Write-Output "Assign Security Role to Crm User"
$users | % {Assign-CrmUserSecurityRole -User $_}

Write-Output "Completed"